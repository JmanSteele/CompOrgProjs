#xor the two 32bit numbers together and if the entire array is 0 then they are 100% the same
.data     
bitnumone:      .byte 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1   #all the bitnums will be compared to this one
bitnumtwo:      .byte 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1
bitnumthree:    .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1
bitnumfour:     .byte 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0
message:        .asciiz "Comparison result of num1/num2 is: "
message1:       .asciiz "Result of num1/num3 is: "
message2:       .asciiz "Result of num1/num4 is: "
division:       .asciiz "/"
skip:           .asciiz "\n"

.text
la $s0, bitnumone
la $s1, bitnumtwo
la $s2, bitnumthree
la $s3, bitnumfour
oneHutoo:

# $s0 = base address of bitnumone, $s1 = i 
addi $t6, $0, 0
addi $t7, $0, 0 # i = 0 
addi $t0, $0, 32 # $t0 = 31 
loop: 
beq $t0, $t7, done # if i ==10, exit loop 
add $t1, $t7, $s0 # $t1 = address of bitnumone[i] 
add $t3, $t7, $s1
lb $t2, 0($t1) # $t2 = bitnumone[i]
lb $t4, 0($t3) # $t4 = bitnumtwo[i] 
xor $t5, $t4, $t2
addi $t7, $t7, 1 # i = i+1
beq $t5, 0, count0       #count the zeros
j loop
count0:
addi $t6, $t6, 1         #this allows us to see how many numbers in bitnum1 are similar to bitnum2
j loop

done:
la $a0, message
li $v0, 4
syscall

move $a0, $t6
li $v0, 1
syscall

la $a0, division
li $v0, 4
syscall

la $a0, 32
li $v0, 1
syscall

la $a0, skip
li $v0, 4
syscall

addi $t6, $0, 0
addi $t7, $0, 0 # i = 0 
addi $t0, $0, 32 # $t0 = 32 
loop1: 
beq $t0, $t7, done1 # if i ==10, exit loop 
add $t1, $t7, $s0 # $t1 = address of bitnumone[i] 
add $t3, $t7, $s2
lb $t2, 0($t1) # $t2 = bitnumone[i]
lb $t4, 0($t3) # $t4 = bitnumthree[i] 
xor $t5, $t4, $t2
addi $t7, $t7, 1 # i = i+1
beq $t5, 0, countz
j loop1
countz:
addi $t6, $t6, 1
j loop1

done1:
la $a0, message1
li $v0, 4
syscall

move $a0, $t6
li $v0, 1
syscall

la $a0, division
li $v0, 4
syscall

la $a0, 32
li $v0, 1
syscall

la $a0, skip
li $v0, 4
syscall

addi $t6, $0, 0
addi $t7, $0, 0 # i = 0 
addi $t0, $0, 32 # $t0 = 31 
loop2: 
beq $t0, $t7, done2 # if i ==10, exit loop 
add $t1, $t7, $s0 # $t1 = address of bitnumone[i] 
add $t3, $t7, $s3
lb $t2, 0($t1) # $t2 = bitnumone[i]
lb $t4, 0($t3) # $t4 = bitnumthree[i] 
xor $t5, $t4, $t2
addi $t7, $t7, 1 # i = i+1
beq $t5, 0, countze
j loop2
countze:
addi $t6, $t6, 1
j loop2

done2:
la $a0, message2
li $v0, 4
syscall

move $a0, $t6
li $v0, 1
syscall

la $a0, division
li $v0, 4
syscall

la $a0, 32
li $v0, 1
syscall

la $a0, skip
li $v0, 4
syscall

li $v0, 10
syscall
